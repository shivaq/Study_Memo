■■■■■■■■■■■■■■■■■■■■■■■■■■ 結論
Docker に virtualenv は必要
-------------------------------------------------


▼ virtualenv の役割
-------------------------------------------------
プログラミング言語/モジュールの隔離
プロジェクトの依存関係を、他のプロジェクトや、OSパッケージから隔離できる。

他のマシンで同じようにするには、インストールプロセスを再びやる必要あり
-------------------------------------------------

▼ Docker でできること
-------------------------------------------------
OS の隔離
依存関係をドッカーのコンテナにインストールしてプロジェクトを隔離できる

他のマシンに移行できるポータビリティを提供する
-------------------------------------------------


▼ Docker だけではできないこと// だから、docker 内に virtualenv 環境を作ろう
-------------------------------------------------
python アプリをどうパッケージするか
どうビルドするか
依存関係をどうするか
Image をどう構造化するか
-------------------------------------------------




■■■■■■■■■■■■■■■■■■■■■■■■■■ Python の ○○ディレクトリたちの説明
▼ user base directory とは
-------------------------------------------------
ユーザーのホームディレクトリ内に配置される。
デフォルトでは下記
~/.local
-------------------------------------------------

▼ user data directory とは
-------------------------------------------------
バージョン特定のデータを格納。config, image, translation
デフォルトでは下記
~/.local/lib/python2.6
-------------------------------------------------

▼ user site directory とは
-------------------------------------------------
ユーザーのホームディレクトリ内の site directory
デフォルトでは下記
~/.local/lib/python2.6/site-packages
-------------------------------------------------

▼ site-packages(site directory) とは
-------------------------------------------------
・サードパーティ製のライブラリの置き場
・sys.path のディレクトリ
-------------------------------------------------




■■■■■■■■■■■■■■■■■■■■■■■■■■ user site directory の勧め by PEP
https://www.python.org/dev/peps/pep-0370/
-------------------------------------------------
PEP 曰く、ユーザーごとの site-packagee ディレクトリを作成し、
ホームディレクトリにローカル インストールをすることを提案している
// ※ virtualenv を使うという回避策もあるが、それは PEP の目指すゴールではない。
-------------------------------------------------

▼ user base directory を上書きする環境変数 PYTHONUSERBASE
-------------------------------------------------
// 下記で、ユーザーベースディレクトリを任意の場所にした上でインストールできる
export PYTHONUSERBASE=インストールしたいディレクトリ
pip install パッケージ名 --user
-------------------------------------------------






▼ pip でインストール先を指定
-------------------------------------------------
pip install -r requirements.txt --user --upgrade














-------------------------------------------------
マウントされたフォルダ内に
アプリが必要とする python パッケージを格納する

そうすることで、コンテナをリセットするたびに再インストールせずにすむ。
-------------------------------------------------







▼ docker で pip install する方法
-------------------------------------------------
・格納先指定に --target を使うと、アップグレードが変な挙動になるので駄目
・
-------------------------------------------------
# docker-compose.yml
vendors:
  image: python:3
  working_dir: /mnt
  volumes:
    - .:/mnt
  environment:
    PYTHONUSERBASE: /mnt/vendor
  command: pip install -r requirements.txt --user --upgrade

server:
  image: python:3
  working_dir: /mnt
  volumes:
    - .:/mnt
  ports:
    - '5000:5000'
  environment:
    PYTHONPATH: src
    PYTHONUSERBASE: /mnt/vendor
  command: python src/server.py
-------------------------------------------------









▼ site-packages にインストールする際、下記を厳密に制限せよ
-------------------------------------------------
・python モジュール？
・システム・ツール？
// どういう表現が正確なのか、自信がない
-------------------------------------------------
・なぜか →pip が悪さをする 事象を回避するために
・下記以外は virtualenv にインストールすべし
▼ インストールされていていいもの
・OS が提供する python パッケージ のみを使うシステム・ツール
-------------------------------------------------




▼ アプリサーバの OS から、各アプリを隔離せよ
-------------------------------------------------
// Docker とは、を学んでから改めてここを更新したい
-------------------------------------------------
Docker/lxc/jails/zones/kvm/VMware/…
container/vm
-------------------------------------------------
▼ 上記に加えて Python 環境も隔離せよ
・virtualenv を使って。
-------------------------------------------------




▼ Python wheels を使うべし
-------------------------------------------------
Python wheels を使うと、setup.py install を使うより早い。
なぜなら、繰り返しビルドにつかわれるバイナリがキャッシュされるから。
-------------------------------------------------


▼ wheelとは？
-------------------------------------------------
Pythonのパッケージの形式（フォーマット）
実態はzip形式のアーカイブ

pipでパッケージをインストールする時は、wheel形式のファイルをダウンロードする
Pythonのパッケージを作って配布したい場合は、wheel形式のファイルを作成する必要がある。
-------------------------------------------------

▼ ビルドコンテナと、run コンテナを隔離したほうがコンテナサイズが小さくなる
-------------------------------------------------
-------------------------------------------------





▼ つまり、こういうことがいいたいらしい。
うまく翻訳できん。
-------------------------------------------------
pip や virtualenv を使えば、Docker に(それほど)依存しない。

コンテナ化されていない環境の場合、ビルドやデプロイをするためにたくさんの同じコンセプトを適用しなければならない。

デプロイ環境がコンテナ化されていなくても、コンテナに増分migrateをすることもできる。

wheel をコンテナ内にビルドし、テストすることができる。
そしてそこで、ベースとなるイメージが、デプロイ先の非コンテナ化環境とマッチしている限り、
コンテナ化の利点を享受できる。

つまり、Jenkins などの CI ホスト上のホスト環境をアップグレードすることなく
ビルド、テスト環境をすばやくアップグレードできるということ。
-------------------------------------------------






▼ pip が悪さをする
-------------------------------------------------
・pip が依存するモジュールをグローバル Python にインストールした場合
pip がそれに対して互換性がないとpip が壊れる
-------------------------------------------------
・pip は自身に必要なモジュールをバンドルしている
・pip はモジュールをimportして使用する
argparse (1.2.1)
chardet (2.0.1)
colorama (0.2.5)
html5lib (0.999)
pip (1.5.4)
requests (2.2.1)
setuptools (3.3)
six (1.5.2)
urllib3 (1.7.1)
wsgiref (0.1.2)
・上記モジュールが、別途グローバル python にインストールされたとする
・pip がモジュールをimport して使用する際、互換性がないとエラーになる
-------------------------------------------------
