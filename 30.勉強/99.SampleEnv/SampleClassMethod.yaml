---
AWSTemplateFormatVersion: '2010-09-09'
Description: VPC knowhow template
################### Parameters ###################
Parameters:
  # KeyName:
  #   Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
  #   Type: String
  #   MinLength: '1'
  #   MaxLength: '64'
  #   AllowedPattern: "[-_ a-zA-Z0-9]*"
  #   ConstraintDescription: can contain only alphanumeric characters, spaces, dashes
  #     and underscores.
  # SSHFrom: # 砦にアクセスできるアドレスを、一時的に制限するよう
  #   Description: Lockdown SSH access to the bastion host (default can be accessed
  #     from anywhere)
  #   Type: String
  #   MinLength: '9'
  #   MaxLength: '18'
  #   Default: 0.0.0.0/0
  #   AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  #   ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
################### DB

################### EC2
  WebFleetSize:
    Description: Number of EC2 instances to launch for the web server
    Default: '2'
    Type: Number
    MaxValue: '100'
    MinValue: '1'

Resources:
  PowerUserRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: PowerUserPolicy
        PolicyDocument:
          Statement:
          - Sid: PowerUserStmt
            Effect: Allow
            NotAction: iam:*
            Resource: "*"
  PowerUserProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: PowerUserRole
################### S3
  LogBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
  LogBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: LogBucket
      PolicyDocument:
        Id: LogBucketPolicy
        Statement:
        - Sid: WriteAccess
          Action:
          - s3:PutObject
          Effect: Allow
          Resource:
            Fn::Join:
            - ''
            - - 'arn:aws:s3:::'
              - Ref: LogBucket
              - "/AWSLogs/"
              - Ref: AWS::AccountId
              - "/*"
          Principal:
            AWS:
              Fn::FindInMap:
              - ELBLogger
              - Ref: AWS::Region
              - AccountID

################### SecurityGroup

################### WaitConditionHandle


# ▼ WaitConditionHandle
# ・スタックリソースの作成をスタック作成以外の設定操作とコーディネート
#
# AWS::CloudFormation::WaitConditionHandle タイプにはプロパティがありません。
# Ref 関数を使用して WaitConditionHandle リソースを参照すると、AWS CloudFormation から署名付き URL が返されます。
# Amazon EC2 インスタンスで実行中のアプリケーションやスクリプトに
# この URL を渡すことによって、その URL にシグナルを送信します。
#
#
# ※ Amazon EC2 および Auto Scaling リソースについては、待機条件ではなく CreationPolicy 属性を使用することをお勧め
  BastionWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  BastionWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: BastionInstance
    Properties:
      Handle:
        Ref: BastionWaitHandle
      Timeout: '900'

################### EC2
  BastionInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType:
        Fn::FindInMap:
        - StackConfig
        - BastionServer
        - InstanceType
      KeyName:
        Ref: KeyName
      SubnetId:
        Ref: FrontendSubnet1
      ImageId:
        Fn::FindInMap:
        - AWSAmazonLinuxAMI
        - Ref: AWS::Region
        - '201403'
      IamInstanceProfile:
        Ref: PowerUserProfile
      SecurityGroupIds:
      - Ref: SSHSecurityGroup
      - Ref: VPCDefaultSecurityGroup
      Tags:
      - Key: Name
        Value: Bastion
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - "#! /bin/bash -v\n"
            - 'yum update -y

'
            - "# Helper function\n"
            - 'function error_exit

'
            - "{\n"
            - '  /opt/aws/bin/cfn-signal -e 1 -r "$1" '''
            - Ref: BastionWaitHandle
            - "'\n"
            - "  exit 1\n"
            - "}\n"
            - "# Install packages\n"
            - "/opt/aws/bin/cfn-init -s "
            - Ref: AWS::StackId
            - " -r BastionInstance "
            - "    --region "
            - Ref: AWS::Region
            - " || error_exit 'Failed to run cfn-init'\n"
            - "# All is well so signal success\n"
            - /opt/aws/bin/cfn-signal -e $? -r "BastionInstance setup complete" '
            - Ref: BastionWaitHandle
            - "'\n"
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              mysql55: []
              jq: []
              python-magic: []
  BastionInstanceEIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
      InstanceId:
        Ref: BastionInstance


################### AutoScaling
  ApplicationFleet:
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: '1'
        MinInstancesInService: '1'
        PauseTime: PT2M30S
    Properties:
      AvailabilityZones:
      - Fn::GetAtt:
        - ApplicationSubnet1
        - AvailabilityZone
      - Fn::GetAtt:
        - ApplicationSubnet2
        - AvailabilityZone
      VPCZoneIdentifier:
      - Ref: ApplicationSubnet1
      - Ref: ApplicationSubnet2
      LaunchConfigurationName:
        Ref: ApplicationServerLaunchConfig
      MinSize:
        Ref: WebFleetSize
      MaxSize:
        Ref: WebFleetSize
      DesiredCapacity:
        Ref: WebFleetSize
      LoadBalancerNames:
      - Ref: ElasticLoadBalancer
      Tags:
      - Key: Name
        Value: Application
        PropagateAtLaunch: 'true'
  ApplicationServerLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      InstanceType:
        Ref: WebInstanceType
      KeyName:
        Ref: KeyName
      ImageId:
        Fn::FindInMap:
        - AWSAmazonLinuxAMI
        - Ref: AWS::Region
        - '201403'
      SecurityGroups:
      - Ref: VPCDefaultSecurityGroup
      - Ref: ApplicationSecurityGroup
      AssociatePublicIpAddress: 'true'
      IamInstanceProfile:
        Ref: PowerUserProfile
      InstanceMonitoring: 'false'
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - "#! /bin/bash -v\n"
            - 'yum update -y

'
            - "# Install packages\n"
            - "/opt/aws/bin/cfn-init -s "
            - Ref: AWS::StackId
            - " -r ApplicationServerLaunchConfig "
            - "    --region "
            - Ref: AWS::Region
            - " || error_exit 'Failed to run cfn-init'\n"
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              httpd: []
              mysql55: []
          files:
            "/var/www/html/index.html":
              content: "<html><head><title>Hello</title></head><body>Hello, world!</body></html>"
              mode: '000644'
              owner: apache
              group: apache
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
################### ELB
  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    DependsOn: AttachGateway
    Properties:
      Subnets:
      - Ref: FrontendSubnet1
      - Ref: FrontendSubnet2
      Listeners:
      - LoadBalancerPort: '80'
        InstancePort: '80'
        Protocol: HTTP
      HealthCheck:
        Target: HTTP:80/index.html
        HealthyThreshold: '2'
        UnhealthyThreshold: '2'
        Interval: '6'
        Timeout: '5'
      SecurityGroups:
      - Ref: PublicWebSecurityGroup
################### Output ###################
Outputs:
  JdbcConnectionString:
    Value:
      Fn::Join:
      - ''
      - - jdbc:mysql://
        - Ref: DatabaseDNSRecord
        - ":"
        - Fn::GetAtt:
          - DBInstance
          - Endpoint.Port
        - "/"
        - Ref: DBName
    Description: "-"
  SSHToBackendServer:
    Value:
      Fn::Join:
      - ''
      - - ssh -i /path/to/
        - Ref: KeyName
        - ".pem"
        - " -oProxyCommand='ssh -i /path/to/"
        - Ref: KeyName
        - ".pem -W %h:%p ec2-user@"
        - Ref: BastionDNSRecord
        - "'"
        - " ec2-user@<private-ip>"
    Description: SSH command to connect to the backend servers
