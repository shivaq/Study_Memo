■■■■■■■■■■■■■■■■■■■■■■■■■■ ジョブキューの実装例
▼ 構成要素
・キュー : 先入れ先出し (FIFO) のリスト構造を持つ、コンピュータの基本的なデータ構造の一つ
・ワーカー : キューに登録されたジョブを逐次実行していくもの
・ジョブ : 何らかの処理

▼ 流れ
クライアント →どのジョブ実行するかキューに登録
ワーカー →実行するジョブをキューから取得 →ジョブを実行

・キューのデータをロストすることを回避するため、ストレージを使用(RDB 等)
・テーブルがキューを、列がジョブを表す
・状態を表す列を使って、ジョブの状態を管理

▼ プロフィール変更など、通知が必要なイベント発生時
1.新規ジョブをキューに登録(テーブルに INSERT)
・状態を実行待ちにする
2.スケジューリング機能を持つフレームワークのワーカーによって、キューをポーリングする
・処理を行うエンドポイントへHTTPリクエストする、ワーカースレッドが起動
・実行待ちのジョブを取得
・状態列を処理中に UPDATE ※行がロックされる
・リクエストを行う。結果によって「実行待ち(リトライ時)」「処理済み(実行成功)」に状態が遷移
・何回目のリトライかによって、次回実行までの待ち時間を計算
3.その他
・動的パラメータの指定
・実行順序の重み付け
・定期的に処理済みジョブを削除





■■■■■■■■■■■■■■■■■■■■■■■■■■ バッチとは
・コンピュータで1つの流れのプログラム群（ジョブ）を順次に実行すること。
・あらかじめ定めた処理を一度に行うこと
・ある期間に集められたデータやプログラムを一気に処理をする方式

▼ 反対語
・リアルタイム処理
・対話処理
・インタラクティブ処理

▼ 用途
・定期的な集計作業
・バックアップ
・メンテナンス
・大量のデータの一括処理

■■■■■■■■■■■■■■■■■■■■■■■■■■ ジョブキューとは
・キューに登録されたジョブを逐次実行するもの
・延々と動き続けるバッチ処理
・ジョブキューはcrondなどを利用せずプロセスを起動させ続け，処理すべきデータが渡されるのを待つ。



▼ 使う理由
・Webアプリケーションで処理するには重く，リアルタイム性が必要ない処理をWebのサイクルから切り離して処理を行うため
・通知処理等を、タイムアウトを気にせずリトライできるようにするため
※ 通知先のサービスが障害やメンテナンスなどで一時的に通知を受け付けられないことがある
※ 通知元は、ジョブキューに処理を任せて、別の処理を進められる

▼ 使用例
・会員登録した際，ユーザに登録完了メールを送信する
※ メール送信処理はリアルタイム性が必要ない
※ Webアプリケーションでは登録完了メールを送ることをジョブキューに登録し，
※ 実際にメールが送信されたことを確認する前にユーザにすぐに登録完了画面を見せてあげる
※ ジョブキューがメール送信処理をWebのサイクルと切り離して行う

・ユーザがアップロードした画像に対して何か処理を行う
・ジョブキューで画像処理を行う
・Webアプリケーションを省メモリかつ高速に動作させることができます。

▼ ジョブキューとメッセージキュー ※厳密に言うと。
ジョブキュー：レスポンスを期待する
メッセージキュー：レスポンスを必要としない
※ ジョブキューとして作られているいくつものミドルウェアでは，レスポンスをクライアント側に返さなくてもジョブキューと名乗っています。
