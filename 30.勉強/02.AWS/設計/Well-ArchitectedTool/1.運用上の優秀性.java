運用上の優秀性の柱には、
ビジネス価値を実現するためのシステムを実行してモニタリングし、
それらをサポートするプロセスと手順を継続的に改善する機能が含まれています。

■■■■■■■■■■■■■■■■■■■■■■■■■■ 設計の原則
▼ 運用をコード化する
アプリケーションコードの管理に使用するのと同じエンジニアリング規律を環境全体に適用

運用手順をスクリプト化
イベントによるトリガーにより、スクリプトを自動的に実行させる

運用をコードで実行することにより、
人為的なミスを抑制し、イベントに対する一貫した対応を可能にする。

▼ ドキュメントに注釈を付ける
クラウドでは、すべての構築後に注釈付きのドキュメントを自動的に作成することができます
(または、手作業で作成したドキュメントに自動的に注釈を付けることができます)。
注釈付きのドキュメントはユーザーやシステムが使用できます。
注釈を、運用で使うコードへのインプットとして使用します。

▼ 頻繁に、小さく、可逆的な変更を行う
コンポーネントが定期的に更新できるようにシステムを設計
小さく、可逆的な変更を行い、更新が失敗した場合は、(可能であればユーザーに影響することなく) 変更を元に戻せるようにする

▼ 運用手順を頻繁に見直す
・運用手順を実施するたびに、手順の改善点を検討
・システムを進化させるのに合わせて、運用手順も適切に進化させることが必要
・定期的にゲームデーを開催し、すべての運用手順が有効で、チームがそれらに精通していることをレビューして確認

▼ 発生しうる障害を予想する
「事前」の演習により潜在的な障害の原因を特定し、その原因を排除するか、影響を軽減
障害シナリオをテストし、障害の影響に対する理解が正しいかを確認
対応手順をテストして、手順が有効であり、チームがそれらの実行を十分理解していることを確実に
定期的にゲームデーを開催し、シミュレートされた障害イベントに対するシステムの動作とチームの対応をテスト

▼ 運用上の失敗を改善に役立てる
すべての運用上のイベントや障害から得た学びをチームや組織全体に共有する。
そしてそれを運用の改善に役立てる。

■■■■■■■■■■■■■■■■■■■■■■■■■■ 準備のベストプラクティス

■■■■■■■■■■■■■■■■■■■■■■■■■■ 運用のベストプラクティス


■■■■■■■■■■■■■■■■■■■■■■■■■■ 進化のベストプラクティス
