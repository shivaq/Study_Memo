■■■■■■■■■■■■ AWS Batch とは
・キューベースのジョブ実行サービス
・高スケーラビリティなバッチを簡単作成可能
・キューにputすると、バッチが起動しなんらかの処理を行う
・ジョブに依存関係が定義できる
・処理すべきジョブ数に応じ、クラスタがオートスケール
・処理能力ごとにクラスタを分割管理可能
・クラスタはECS 上に構築される
・ジョブの依存関係が定義できる（B は A に依存した処理である2、など）
・優先度を持ったキューを複数定義できる

▼ マネージドな機能
・クラスタ管理、ジョブキュー、ジョブスケジューラ

■■■■■■■■■■■■■■■■■■■■■■■■■■ 有名なワークフローエンジンのサポート
AWS Batchは、 Pegasus WMS, Cromwell, Luigiなどの商用やOSSのワークフローエンジンをサポートします。そして、それぞれの言語を用いてワークフローを定義することができます。

■■■■■■■■■■■■■■■■■■■■■■■■■■ ジョブスケジューリングの優先順位付け
・優先度の異なる複数のキューを作成することができます。
・スケジューラによって、いつどこでどのようにジョブがキューにサブミットされるか設定することができます。
・キュー毎にCPU等の実行環境を設定することができます。 ※ 優先度の高いキューは高性能インスタンスを利用するなど

■■■■■■■■■■■■■■■■■■■■■■■■■■ ECR
・AWS Batch環境の作成前に、リポジトリを作成しダミー用コンテナイメージをアップしておきましょう。
・コンテナを格納するプライベートレポジトリ
・リポジトリを利用する認証もIAMロールで対応できる



■■■■■■■■■■■■■■■■■■■■■■■■■■ フロー
▼ 準備
・Docker イメージを作成
https://qiita.com/Esfahan/items/8774afff63ee98b05309

▼ 通常運転
・jobをsubmitし、Batchのqueueに登録(FIFO)
※AWS Batchをキック
・job を実行
・ECS がEC2 インスタンスを起動 ※ ここがタイムラグとなる
・ECS がECRまたはDocker Hubからコンテナイメージを取得 →コンテナ立ち上げ
・コンテナ上でタスクを実行 ※処理の重さに応じてオートスケール
・終わったら自動でterminate

■■■■■■■■■■■■■■■■■■■■■■■■■■ Lambda じゃないからできること
・Lambdaの5分制限を気にしなくてよい
・ディスクもEBSやインスタンスストアを利用できるため容量が大きい
・開発言語が自由

■■■■■■■■■■■■■■■■■■■■■■■■■■ 主な用途
・ハイパフォーマンスコンピューティング用途で真価を発揮
・大規模なスケール、ジョブの依存定義 が可能なマネージド 並列分散 処理基盤




■■■■■■■■■■■■ 必要なもの
ECS
・AWS Batch 定義時に、自動で構築される。追加設定不要
・アプリの基本的なビルディングブロックとしてのコンテナを作成
・コンテナのスケールアップ/ダウンでアプリの容量要件に対応
・ELB などとも統合して利用できる

▼ クラスター
サービスが稼働するEC2インスタンス（群）

▼ タスク
コンテナの集まりで、docker-compose.ymlのイメージ。

▼ サービス
タスクとクラスター、ELB（ターゲットグループ）を紐付ける。
EBでいうアプリケーションのような感じ。

オートスケーリング
・AWS Batch 定義時に、自動で構築される。追加設定不要
■■■■■■■■■■■■ AWS Fargate を使った ECS
・EC2 を管理することなく、コンテナを実行できる。
・インスタンスタイプ、スケールタイミング等の最適化をする必要がない


-------------------------------------------------
ECR
・コンテナImageを登録するレポジトリを作成
