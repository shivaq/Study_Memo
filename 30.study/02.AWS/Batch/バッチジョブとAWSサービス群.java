■■■■■■■■■■■■ 対象となるバッチの種類
■■■■■■■■■■■■ ジョブキュー形式のバッチ
・AWS BatchやEBのWorkerもしくは、SQS + Cron on EC2で処理するほうがスマート

■■■■■■■■■■■■ スケジュール系のバッチ処理
・cronでスケジュール管理するような定期的なバッチ処理
・毎日00時00分や10分毎にサイクル起動等、事前に定義した時間に正確に動くことが期待されているもの

■■■■■■■■■■■■ Lambda
pros:
スケジュール実行は出来る
手軽に実装出来る

cons:
最大の実行時間が、300秒なので不安がある
利用できる実行環境(言語)が制限される。今回はPHPで書かれたプログラムを使いたかったので大変

■■■■■■■■■■■■■■■■■■■■■■■■■■ Lambda と SQS
・S3の通知からLambdaが実行されて何かデータを処理
・SQSからデータを1つずつ取出してタスクを実行

cons:
・個々の処理は単体で実行されていて、処理の順番や依存性の管理をプログラミング無しに扱うことは出来ず
・EC2等で分岐や順番や依存関係をプログラミングする必要

■■■■■■■■■■■■ AWS Batch
pros:
・バックエンドがECSなので、ECSの資産を流用出来る
・コンピューティングリソースは全く管理する必要はない
・vCpuとメモリをジョブ定義に指定するだけ
・ECSでいうクラスタ管理も不要
・CloudWatchEvent でスケジュール起動可能

cons:
AWS SAにお聞きしたら、大規模データのバッチ処理みたいな使い方を想定されたサービスで、cron代わりといった用途には向かないとの事。

■■■■■■■■■■■■ Cron on EC2
pros:
運用方法が枯れており、安定感はある

cons:
EC2インスタンスの運用が必要
・crontabの登録が面倒
・ジョブスケジューラ系のツール入れるとしても運用が。。
・実行環境を作らなければならない (開発環境はdockerなのでそれと同じ実行環境をプロビジョニングツールなどで作らないといけない)


■■■■■■■■■■■■ Amazon ECSのサービス起動しているコンテナ内にcronを定義して実行
pros:
・ECSの資産をそのまま流用出来る
・CMD句に指定する起動シェルでcrontabの登録をする ⇒バッチ毎にコンテナを作って実行するアーキテクチャで出来るかも

cons:
・バッチ実行中にデプロイが走るとバッチが強制終了される
  ※デプロイ処理時に、コンテナを破棄して作り直すので
・バッチ全体のスケジュールを一望出来ないので、バッチ管理台帳みたいなものを用意することになりそう

■■■■■■■■■■■■ Amazon ECSのScheduleTask
pros:
・cron記法でスケジュールを定義する事が出来る
・デプロイ時に実行中のバッチに影響を与えることがない
  ※ コンテナ起動時に、指定したDockerイメージをpullするアーキテクチャなので
・docker pull時にキャッシュが効き起動が早い
  ※ ECSクラスタとしてホストを固定出来るので、
  ※ (LambdaやAWS batchは毎回インスタンスが変わるのでpullにそこそこ時間がかかる)
・AWSコンソールから気軽に確認出来る(デバッグに役立ちます)
  ※ 標準出力をcloud watch logsに送ることで起動処理の失敗等を、

cons:
特に減点になるような要素なし。
