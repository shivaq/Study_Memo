▼ filter()
# 引数を処理して true/false を返す関数に、イテレーターの要素を渡す。
# 結果 →True の要素だけを返す
-------------------------------------------------
nums = [0,1,2,3,4,5,6,7,8,9,10]

def check_even(num):
    return num % 2 == 0


filter(check_even,nums)

list(filter(check_even,nums))
-------------------------------------------------




▼ map()
-------------------------------------------------
map(function, iterable, ...)

for loop を書かなくても iterate 処理ができる
-------------------------------------------------

▼ Map 例
-------------------------------------------------
# 関数とリストを定義
def fahrenheit(celsius):
    return (9/5)*celsius + 32

temps = [0, 22.5, 40, 100]

# iterator の要素が関数に渡され、処理される
F_temps = map(fahrenheit, temps)

#Show
list(F_temps)
-------------------------------------------------











▼ Lambda
# 関数をいちいち定義せず、アノニマス関数を作成できる。
# ただし、単一の expression にのみ使用するもの。
#
# ブロック内で複数のタスクを走らせる場合は、関数を定義しましょう。
-------------------------------------------------
list(map(lambda x: (9/5)*x + 32, temps))
-------------------------------------------------
list(filter(lambda n: n % 2 == 0,nums))
-------------------------------------------------
# 最初の文字列を取得する
lambda s: s[0]
# 文字列をひっくり返す
lambda s: s[::-1]
-------------------------------------------------












▼ Map で複数の List を受け取る
-------------------------------------------------
a = [1,2,3,4]
b = [5,6,7,8]
# 受け取るIterable の長さが異なる場合、最短インデックスがなくなった段階で処理が止まる
c = [9,10,11]

list(map(lambda x,y,z:x+y+z,a,b,c))
-------------------------------------------------
