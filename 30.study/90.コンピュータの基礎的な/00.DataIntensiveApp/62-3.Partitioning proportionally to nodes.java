■■■■■■■■■■■■■■■■■■■■■■■■■■ Partitioning proportionally to nodes
動的パーティショニングでは、
パーティションの"数"はデータセットのサイズに比例する。
スプリットとマージ処理は、各パーティションのサイズを、最小値と最大値の間に維持されるようになされる。

一方、パーティション数固定の場合、
各パーティションの"サイズ"はデータセットのサイズに比例する。

どちらの場合も、
パーティションの数は、ノードの数とは無関係

▼ ノード数に比例したパーティション数
Cassandra and Ketama
ノードごとに、パーティション数が固定

この場合、
各パーティションのサイズはデータセットサイズに比例して増減する
ノード数は普遍だったとしても。

で、
ノード数を増やすと、パーティションのサイズは小さくなる。

通常、データ量が増えれば、それを格納するノード数もより必要になるので、
この方法を取ると、各パーティションのサイズが安定する。

▼ 新ノードがクラスタに追加されるとき
ランダムに、既存のパーティションから分割対象を固定数選択する
it randomly chooses
a fixed number of existing partitions to split,
そして、
split されたパーティションたちの片割れのオーナーを剥ぎ取る。
ランダマイゼーションによってsplit はフェアではなくなるが、
大量のパーティションの平均で見ると、
(in Cassandra, 256 partitions per node by default)
新規ノードは既存のノードたちから a fair share of the load を取得することになる。

Cassandra 3.0 では、アンフェアなスプリットを回避する別のリバランシングアルゴリズムが導入された。

パーティションの境界をランダムにとる際には、
hash-based partitioning is used
結果、
境界は、ハッシュ機能が生成した、ある範囲の数値たちから取られる。
結果、
このアプローチは、consistent hashing のオリジナルな定義に最も近いとされている。
 Newer hash functions は、より低いメタデータオーバーヘッドで同様の効果を達成することができる。
