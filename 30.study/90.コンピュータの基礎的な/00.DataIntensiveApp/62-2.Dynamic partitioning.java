■■■■■■■■■■■■■■■■■■■■■■■■■■ Dynamic partitioning
キーレンジ パーティショニングを使うDBには、
境界が固定された、固定数のパーティションはとても不便。

境界設定のデキが悪い場合、
全てのデータが一つのパーティションに入って、
他のパーティションは空っぽ、といったこともありうる。
パーティション境界の手動再設定はとてつもなくめんどくさい。

そんなわけで、
HBase and RethinkDB といったキーレンジパーティションデータベースは、
パーティションを動的に作成する。

▼ 動的パーティショニング
パーティションが設定したサイズを超えると、// HBase の場合 10GB
パーティションは、だいたい半分ずつになるように2つに分割される。

データが削除されるなどしてパーティションがしきい値以下に縮小されると、
隣り合ったパーティションにマージされる。
// このプロセスは B-tree のトップレベルで起こることに似ている

固定数パーティションの場合のように、
各パーティションは一つのノードに割り当てられる。
各ノードは複数のパーティションを取り扱う。

大きなパーティションが分割された場合、
分割された片割れを他のノードに転送して、
load をバランスすることができる。

HBase では、パーティションファイルの転送は、
基盤となる分散ファイルシステム HDFS を通じてなされる。

▼ 動的パーティショニングの利点
パーティションの数は総データ量に適応する。

データ量が少なければ、
パーティション数は少なくて十分。オーバーヘッドも小さくなる。

データ量が多い場合、
各パーティションのサイズが設定された最大値に収まるようになる。

▼ 注意したいこと：
空のデータベースは、
パーティションの境界線をどこに引くか、といった事前情報もないから、
単一パーティションから開始される。

パーティションが最初に分割されるデータ量になるまでは、
全ての書き込みは単一ノードで処理されることになり、
他のノードはアイドル状態になる。

上記事象を緩和するために、
HBase and MongoDB は
空のDBが初期パーティションセットを設定できるようにしている。
(this is called pre-splitting).

キーレンジパーティショニングの場合は、
キーの分散がどんな感じになるか事前に知っておかなくてはならない。

ダイナミックパーティショニングは
key range–partitioned data だけでなく、
hash-partitioned data にも有用なので、
MongoDB since version 2.4 では両方をサポートしてて、
どちらの場合もパーティションを動的に分割している。
