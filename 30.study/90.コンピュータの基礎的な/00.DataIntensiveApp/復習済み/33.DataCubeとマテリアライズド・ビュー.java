■■■■■■■■■■■■■■■■■■■■■■■■■■ Aggregation: Data Cubes and Materialized Views
// ・すべてのデータウェアハウスが列指向でなければならないことはない。
// ・行指向DBや他のアーキテクチャも使われる
列指向ストレージは、分析用クエリ時に、行指向などよりずっと早い。

▼ materialized aggregates.
・データウェアハウスのクエリは、集計機能をよく使う
※ such as COUNT, SUM, AVG, MIN, or MAX in SQL
・同じ集計は他のいろんなクエリでもなされたりする。
 →じゃあ、よく使われるクエリのカウントや合計をキャッシュしておけばいいんだ
マテリアライズド・ビューは、そんなキャッシュを作る方法です。

・RDBにおける「standard (virtual) view」
 →テーブル風OBJ。他のクエリの結果がコンテンツになっている。

▼ バーチャルビューとマテリアライズド・ビューの違い
バー：writing queriesのただのショートカット

バーチャルビューから読み込む場合、SQLエンジンは、ビューに実行中のクエリにまで拡張して、そのクエリを処理する。
※よくわからんから、気になる場合は別のとこで再度調べたほうがいい

マテ：クエリ結果を実際にディスクにコピーしたもの。
もととなるデータに変更があった場合、マテリアライズド・ビューは更新が必要になる。
というのも、マテリアライズド・ビューはそれらデータを非正規化したコピーだから。
 →DBはこれらを自動的に行うが、結果書き込み処理にコストがかかるため、OLTP DB ではマテリアライズド・ビューはあまり使われない。


▼ known as a data cube or OLAP cube
・マテリアライズド・ビューがよく使われるケース
・異なるディメンションによってグループ化された集計のグリッド

例)
2つの次元テーブルに対する外部キーだけしかないファクトを想像してください
※ 日付、製品
 →二次元テーブルができる。
 →各セルは、対象date-product の組み合わせのすべてのファクトの属性の集計を含んでいる。(原価のSUMとか)
 ※ 今日の製品Aの集計セル、今日の製品Bの集計せるなど

・一般的に、ファクトは2つ以上の次元を持っている。
五次元キューブがどんな風なのか想像するのは難しいが、基本は一緒。
各セルは、特定のdate-product-store-promotion- customer combination の売上を含んでいる
※ 今日の製品Aが京都店で販促込でどんな顧客にいくら売れた
これら値は各ディメンションで繰り返しサマライズされる。

マテリアライズド データキューブは、特定のクエリをめちゃ早くする効果がある。
それらは事前に計算されているから。
例)
昨日の店舗ごとの総売上を知りたいとする。
 →適切なディメンションの合計を見るだけでいい。何百万もの行をスキャンする必要はない。

▼ マテリアライズド・ビューの欠点
生のデータをクエリするときのような柔軟性はない
例)
原価100ドル以上の製品の売上に占める割合、といった計算をすることができない。
なぜか
価格はディメンションのうちのひとつ、ではないから。

よって、
ほとんどのデータウェアハウスは、できるだけ生データをたくさん保持しようとする。
データキューブみたいな集計は、特定のクエリのパフォーマンス控除のためだけに使われたりする。
