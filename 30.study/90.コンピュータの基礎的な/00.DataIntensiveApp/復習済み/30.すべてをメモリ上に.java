■■■■■■■■■■■■■■■■■■■■■■■■■■ Keeping everything in memory
・殆どのデータストラクチャは、"ディスク"の制約への回答として考案されたもの

・ディスクはメモリと比べて扱いづらい
・磁気ディスクもSSDも、慎重にレイアウトしないといいパフォーマンスが出せない

▼ ディスクのアドバンテージ
・データが durable(丈夫) →電源落ちても消えない
・RAM と比べて安価
 →とはいえ、RAMが安価になるにつれ、ディスクを使わずメモリのみをストレージに使うケースもでてきた

▼ in-memory key-value stores
・ Memcached とか
・マシン再起動で消えても良いデータ
・キャッシュにのみ使われている

▼ 消えないメモリDBの実現方法
・battery-powered RAM をつかうとか
 by writing a log of changes to disk,
 by writing periodic snapshots to disk, or
 by replicating the in-memory state to other machines.
 ・Redis はディスクに非同期で書き込むため、耐久性は低い

▼ メモリDBが再起動する時
・状態をリロードする。
 →ディスクから、またはネットワーク上のレプリカから ※ 特別なHWを使っている場合は別だが
・ディスクに書き込まれていても、in-memory database である。
 →append only ログの耐久性のために、ディスクが使われることはめったにない
 →読み込みはすべてメモリからなされる

▼ ディスクに書き込むことの利点
・ディスクは外部ユーティリティによるバックアップ、検査、分析が容易

▼ メモリDBのパフォーマンスがよい理由
・ディスクから読み込まないから、ではない
・ディスク書き込みのためのオーバーヘッドがないから ※ メモリのデータ構造を、ディスクに書きこめるようにエンコードするためのオーバーヘッド
・ディスクDBがメモリたくさん積んでて、ディスクからはほとんど読まないとしても、OSは最近使ったディスクブロックをメモリにキャッシュしてる
