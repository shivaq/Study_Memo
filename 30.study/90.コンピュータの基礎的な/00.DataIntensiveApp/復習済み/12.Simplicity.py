新しいエンジニアがシステムを理解しやすいようにする。
システムからできるだけ複雑性を取り除く。
※ これは、UI のシンプルさと同じではない

■■■■■■■■■■■■■■■■■■■■■■■■■■ 複雑さを管理する
・プロジェクトが大きくなるにつれ、コードは複雑で、理解困難なものになる。
結果、システムに取り組む人々の動きをスローダウンさせる
 →さらに、メンテナンスコストが大きくなる。

・変更時にバグが混入するリスクが高まる
隠された仮定、意図せぬ結果、予期せぬ相互作用などなどが見過ごされやすくなる


■■■■■■■■■■■■■■■■■■■■■■■■■■ 複雑さの症状
・explosion of the state space
・モジュールの密結合
・相互依存
・用語や名前の規則の一貫性のなさ
・パフォーマンスの問題を解決することを目的にしたハック
・どこかの問題をワークアラウンドするための特別な処置

■■■■■■■■■■■■■■■■■■■■■■■■■■ シンプルにするために
・複雑さを減らすと、保守性が上がる。よって、シンプルさはシステム構築におけるキーのうちの一つとなる。
・システムをシンプルにするために、機能を減らす必要はない。偶然うみだされた複雑さを取り除くことを意味する。
・accidental な複雑さは、ソフトウェアが解決する問題が継承したものではなく、実装の結果生じた複雑さのことと定義される。

■■■■■■■■■■■■■■■■■■■■■■■■■■ 抽象化が複雑さを取り除く
・よい抽象化は実装時のディテールを覆い隠す。
・シンプルでわかりやすい外観になる
・良い抽象化は、異なるアプリでの利用を可能にする
・似た実装を何度もすることより、再利用したほうが効率的
・高品質なソフトウェアになる。抽象化されたコンポーネントの品質改善は、それを使うすべてのアプリの利益となる。
