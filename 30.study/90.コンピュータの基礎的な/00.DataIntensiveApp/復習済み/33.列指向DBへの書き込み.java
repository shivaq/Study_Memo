■■■■■■■■■■■■■■■■■■■■■■■■■■ データウェアハウス における 最適化の光と影
データウェアハウスにおいて、最適化は有用。
ほとんどの負荷はリードオンリークエリだから。
列指向ストレージも、圧縮も、ソートも、全てリードクエリの高速化に役立つ。

▼ 最適化のデメリット
書き込みが難しくなる
・B-Tree みたく即更新することは、圧縮された列に対してはできない。
・ソートテーブルの、真ん中あたりに行を挿入したい場合、すべての列ファイルをリライトしなければならない可能性が高い。
ある列の行ポジションは同定されているため、挿入する時は全列を一度に更新する必要がある。

▼ 解決策。
LSM-trees
 →すべての書き込みは最初にメモリストアに行く
  →ソートされた構造体に追加され、ディスク書き込みの準備がなされる。
メモリストアが列指向か行指向かは関係ない。
十分な書き込みが溜まったら、ディスク上のコラムファイルにマージする。
 →一度に新ファイルに書き込まれる。

クエリは、ディスク上の列と、メモリ上の直近の書き込み両方を検査する
 →2つをマージする。

で、上記挙動はユーザーからは見えない。
アナリスト視点では、
挿入、更新bん、削除がなされたデータは、続くクエリに即反映されて見える。
