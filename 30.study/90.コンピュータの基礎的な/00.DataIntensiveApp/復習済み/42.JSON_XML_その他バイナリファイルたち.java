■■■■■■■■■■■■■■■■■■■■■■■■■■ JSON, XML, and Binary Variants
各言語の標準エンコーディングから移行する候補として有力なのが、JSON と XML。

▼ XML
冗長で、無意味に複雑

▼ JSON
ウェブブラウザが組み込みでサポートしているから人気
XML と比べてシンプル

▼ CSV
パワフルじゃないけど、依存度の低いフォーマットなので人気。

▼ CSV、JSON、XML の問題点
・数値のエンコードのあたりが曖昧
 →XML と CSV は、数値と文字列との違いを識別できない
 ※外部スキーマを参照する場合とかは、別らしい。
・JSON は文字列と数値は判別できるが、int か float かは判別できない。
 →そして、精度を識別できない ※繰り上げのルールとかのことか？

・大きな数値を扱う時に問題
 253 より大きな値は in an IEEE 754 double-precision floating- point number では正確に表現できない。
 結果
  →そういう数値は floating-point numbers を使うような言語に パースする際に不正確になる。※ JS とか
Twitter の例)
・各ツイートのID に 64-bit の数値を使っている
・Twitter API が返す JSONには ツイートIDが二度含まれている
 →1.JSON の数値 2.文字列としての数値
  →これらによって、JSスタイルガイドをが数値を正確にパースできない事象をワークアラウンドしている。

・JSON、XML は、Unicode 文字列(人が読める文字)はサポートしているが、バイナリ文字列(エンコードのない、バイトのシークエンス)はサポートしてない
だが、バイナリ ストリングは使いやすいのだ
回避策
 →バイナリデータを、Base64 を使って テキストとしてエンコードする
 →スキーマは、値がBase64-encoded になるように指定したりする
  →結果、うまくいきはするが、ハッキーだし、データサイズが 33% 増える。

・JSON と XML のスキーマサポート
 →それらスキーマ言語はパワフルだが、実装するのが複雑
 →バイナリストリングなどの正確なデータの翻訳はスキーマの情報に依存しているため、
 XML/JSON を使わないアプリは適切なencoding/decoding logicをハードコードしなければならない可能性がある。

・CSV はスキーマを持たない。
よって、各行、列を定義するのはアプリ側の役目
もし
アプリの変更によって行や列が追加された場合、手動でその変更に対処しなければならない。
また、値にコンマや開業が入ってた時にどうなるかといったことが不透明なフォーマット。
回避ルールはあるし、公式に指定されているが、それらを正確に実装していないパーサーもある。


■■■■■■■■■■■■■■■■■■■■■■■■■■ それでも JSON CSV XML は有用だ
・データがフォーマットを相互変換するような場合 ※ ある組織から別の組織にデータを送るときなど
・フォーマットに人々が合意する限り、フォーマットが効率的かどうかなどはささいなこと。
 異なる組織同士が何がしかに合意する、ということはほんと難しいから
