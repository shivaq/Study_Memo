▼ なぜ ID を使うのだ？
プレーンな文字列("Greater Seattle Area" and "Philanthropy")とかではなく、
region_id and industry_idみたいに IDを使うのはなぜだ？

・プロファイルの中で、スタイルとスペリングに一貫性がある
・曖昧さを回避できる(同じ名前の町はたくさんある)
・例えば人や町の名前を更新する時、一箇所を更新するだけでいい。
・ローカライズが楽ちん。正規化されたリストをローカライズすると、ユーザーの好みの言語で表示させられる。
・検索するのに都合がいい。例えば、シアトルはワシントン州だということが簡単にわかる。文字列からだと分かりづらい。

▼ 重複
ID を格納しようが、文字列を格納しようが、重複は問題になる。

・IDを使う場合、人間にとって意味のある情報(慈善家とか)は、一箇所に格納される。
そしてその文字列を参照するものはすべて、ID を使う。(DBにとってのみ、意味のある情報)

・文字列を直接格納する場合、その情報を使うすべてのレコードに、「人間にとって意味のある情報」が重複していることになる。

▼ ID の強み
・人間にとって意味がない、ということ。意味がないから変更もなされない。
IDのはずっと同じままでいられる。紐づく情報に変更があったとしても。
・人間にとって意味のある物事はすべて、いつか変更が必要になるかも知れない。
そしてもし、その情報が重複している場合、すべての冗長なコピーは更新されなければならないし、一貫性が失われるリスクが生じる。

▼ ここで正規化
そういった重複を取り除くことが、DBにおける正規化のキーとなる考えなのです。

▼ 正規化と相性ガ悪いヤツ
・正規化をするには、多対1 の関係が必要になる。
・RDBでは他のテーブルの行を、IDを使って参照することは普通だ。JOIN が簡単にできるから。
・ドキュメントDBでは、1対多のツリー構造にJOINは不要。JOINに対するサポートも、しばしば弱かったりする。
▼ JOIN ができない世界
・DBがJOINをサポートしていないと、アプリ側のコードで、DBへのクエリを複数回するなどして、JOINをエミュレートしなければならない。
・最初のバージョンはJOINのないドキュメントモデルでいけてても、
データというものには、フィーチャーが追加されるに連れ相互接続する傾向がある。

例)
▼ エンティティとしての組織と学校 ※ただの文字列じゃない。たくさんの属性を持つエンティティだ。
会社と学校名が文字列だとする。
こういうのって、エンティティへの参照にしたほうがよいんじゃないか？
で、各組織は自身のWebページ、ロゴ、ニュースフィードを持つことができる。
で、レジュメはそれら学校や会社、そしてそのロゴや情報にリンクさせることができる。

▼ 推薦状
Linkedinに、他のユーザーのための推薦状を書くことができる機能が追加されたとする。
推薦状は、推薦されたユーザーのレジュメに、推薦者の写真と名前とともに表示される。
推薦者が写真を更新すれば、推薦状にもそれが反映されなければならない。そんなわけで、推薦状は推薦者のプロファイルに対する参照を持たなければならない。
