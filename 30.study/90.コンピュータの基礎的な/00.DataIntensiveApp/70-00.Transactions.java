■■■■■■■■■■■■■■■■■■■■■■■■■■ Transactions
▼ データシステムの厳しい現実
・データベース の SW にしろ HW にしろ、いつだってfail しうる。//  書き込み最中にだって。
・アプリはいつだってクラッシュしうる // 一連の操作の途中にだって
・ネットワーク中断は、DBとアプリの間、あるDBノードと他のノードとの間を切断しうる
・複数のクライアントがDBに同時書き込みすることによるコンフリクトは起こりうる
・データが部分的に更新された(完全に更新されていない)段階でクライアントが読み込むことにより、わけのわからん読み込みになるかもしれない
・クライアント間の競合状態により、意図せぬバグが発生しうる。
-------------------------------------------------

システムが reliable であるためには、
上記 fault に対処しなければならない。
それら fault がシステム全体にとって破滅的な結果をもたらさないよう保証しなければならない。

しかしながら、
fault-tolerance メカニズムを実装するにはたくさんの工数がかかる。
fault とはいわないまでも、不具合になりうるすべての要素について身長うに考える必要がある。
ソリューションが機能することを保証するために、たくさんのテストをする必要がある。

▼ トランザクション！
長い間、トランザクションが、上記イシューをシンプルにするためのメカニズムとして選択されてきた。

トランザクションは、アプリケーションが、いくつかの読み書きを一つのロジカルユニットにグループ化する方法。
概念的には、
一つのトランザクション内の全ての読み書きは一つのオペレーションとして実行される：either
the entire transaction succeeds (commit) or
it fails (abort, rollback).

失敗した場合
 →アプリは安全にリトライする。
トランザクションをつかえば、
エラーハンドリングもぐっとシンプルになる
なぜならば、
部分的失敗(あるオペは施工して、あるオペは失敗する)について心配しなくていいから。

トランザクションを何年も使ってきている人には、上記は当たり前だとおもうだろう。
しかし、我々は、
それを当たり前だと思うべきではない。
それは目的を持って作られたもので、アプリがDBにアクセスするためのプログラミングモデルをシンプルにしたものだ。
トランザクションを使うことで、アプリは concurrency 問題やいろんなエラーシナリオを無視することができる。
代わりにデータベースがそこらへんをケアしてくれる。
で、DBがケアしてくれることを"safety guarantees" と呼んだりする

全てのアプリがトランザクションを必要としているわけではない。
トランザクションを弱めたり、全く使わないほうがよいケースも有る。
// パフォーマンスや高可用性のために

▼ トランザクション要否判別するために
まず、トランザクションが提供する safety guarantees とはなんなのか、
そしてその利用コストは何なのかを理解する必要がある

トランザクションはシンプルに見えて、
たくさんの潜在的で重要なディテールがあったりする。
