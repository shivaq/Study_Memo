▼ Reliability(信頼性)
HWやSWの不良や、ヒューマンエラーがあった場合も、システムが正しく機能し続けること

・アプリが、ユーザーが期待する機能を実行できるということ
・ユーザーの誤った操作やソフトウェアの予想されていなかった使い方をしたとしても、耐えられる
・想定内の負荷やデータボリュームであれば、ユースケースに必要なパフォーマンスを満たすこと
・認められていないアクセスをシステムが防御できていること


▼ fault
誤った挙動をする物事
システムの、スペックから逸脱したコンポーネント

▼ failure
ユーザーにサービスを提供すること、がシステム全体として停止した時

▼ fault tolerant
fault を予期し、対処することができるシステム

▼ fault tolerant なシステムに必要なこと
・fault をランダムに、意図的に発生させる頻度を上げていく(個々のプロセスを警告なしにランダムにKillするなど)
・クリティカルなバグの原因というものは、エラーハンドリングがしょぼいことが原因であることが多い
・意図的なバグを随時発生させても問題ない事が確認できれば、耐障害性に自身を持つことができる
・ゆえに、Netflix の Chaos Monkey は有効である。

▼ HW 不良 への対策
・冗長性をもたせる ※ かつてはこれで十分だった
・少ない数のアプリであり、かつ高可用性が絶対必用なアプリには、冗長性が必要
・最近のアプリは、データボリュームとアプリの処理能力の要求が高まってきている。
結果、たくさんのマシンが使われ始めている。
結果、HW 不良のレートが上がってきている。
※ そして、AWS などは予告なしにインスタンスが使えない状態になったりする
・最近は、全マシンがだめになっても耐えられるシステムへの移行が始まっている。
どのように：耐障害性テクニックを使ったソフトウェア

▼ SW 不良への対策
・システムエラーは予期しづらい。ノード横断的に関係している。HW の障害に比べ、 failure を発生しやすい

▼ ヒューマンエラー
・人間は信頼できない
・オペレーターの設定エラーは、機能停止の主な原因。
・HW 不良 は機能停止の原因のうち 10ー25％ 程度

▼ ヒューマンエラー対策
・エラーが起こる機会をへらす。
抽象化をすすめる。APIを使う。
・管理者用インターフェイスを使って、間違いを起こりにくくする →結局めんどくさくて、管理者IFはワークアラウンドされることになる。バランスが大事
・failure を生じさせる可能性がある場所から、人間がよく間違えを起こす部分をデカップルする。※ sandbox環境
・すべてのレベルでテストを行う。ユニットテストから統合テスト、手動テストまで。
・自動テストはコーナーケースをカバーするのに特に有用
・ヒューマンエラーからの素早い回復ができるようにしておく。
failure のダメージを最小化する。
たとえば
・設定変更のロールバックをすばやくできるようにする
・新しいコードは少しずつロールアウトして、バグが発生した際の影響yフーざーを小さくする
・データの再計算を行うツールを用意する ※ その前の計算が正しくないと判明したときのため
