■■■■■■■■■■■■■■■■■■■■■■■■■■ Node.js とは
・Node.jsはサーバサイドでJavaScriptを実行できるようにしてくれるプラットフォーム
・スケーラブルなネットワーク・プログラムを作成するための簡単な方法を提供する
・非同期 (I/Oの処理結果を待たず処理を進める)
・イベントドリブン (何かしらのキッカケで動き始める)
・シングルスレッド (メモリ消費が少ない、仕事切り替えが少ないので速い)
・Google Chromeに搭載されている高速なJavaScriptエンジンV8をコマンドラインから使えるようにしたJavaScript言語処理系。
・付属ライブラリはノンブロッキングI/Oを特徴とし、そのライブラリを使うにはブラウザ上のJavaScriptとは異なる構文を用いる。

▼ JavaScript の特徴
・JavaScriptはブラウザ上で動くために開発されたプログラミング言語。ブラウザ上で、ページに動きを追加する






■■■■■■■■■■■■■■■■■■■■■■■■■■ Node.js の強み
・クライアントもサーバサイドも同じ言語で書けたら楽だから、広まっている
・リアルタイムWebに強い。※ チャットアプリ、インスタグラム、Paypalなど
・小さいデータや小さい計算の場合、速い
・メモリ消費量が少ない
・ローカルとリモートとのデータのやり取りをシームレスに行うフレームワーク(Meteor)などが出てきている
・サーバ側、クライアント側で処理の共通化ができる (入力値チェックなど)
・JavaやPHPのようなプログラムでは、接続ごとに新しいスレッドが作られる。
8GBのRAMで計算すると、最大ユーザー数は5000名以下しかアクセスができなくなる。
これを増やそうと思ったら、コンピュータを増やすしかない。
・Node.jsはシングルスレッドで非同期処理を行い、この問題に対応できる。

■■■■■■■■■■■■■■■■■■■■■■■■■■ Node.js の弱み
・サーバサイドのコード変更した場合、Node.jsアプリの再起動が必要(な場合が多い)
・単純な処理以外にはそこまで強いイメージもない。






■■■■■■■■■■■■■■■■■■■■■■■■■■ 向いている使いみち
・リアルタイムなアプリケーションに合う
・シングルページアプリケーションに合っている
・WebSocketを利用するアプリに合っている





■■■■■■■■■■■■■■■■■■■■■■■■■■ 基礎用語
コールバック関数(非同期の処理が終わったら呼ばれる関数)
CommonJS (共通化しようとしている規格)
libuv (libev, libeio) 非同期I/Oライブラリ, イベントループ・ライブラリ
DIRT (data-intensive real-time) DIRTy アプリ
npm (node package manager)
沢山のモジュールとそのバージョンやモジュールの依存性を管理する









▼ クライアントサイド JavaScript との違い
・Node.jsは他のプログラミング言語と同じく「プログラムから必要なモジュールを指定」できる
・名前の衝突を避けるために、大域変数を全く使わない
 →ブラウザ上のJavaScriptではグローバル変数以外にファイルをまたがったコードを参照する方法がないので、両者は互換性がない状態

ホストオブジェクト: ブラウザの globalな window オブジェクト
require
モジュール: ファイルI/Oなど
C/C++プラグインで拡張可能
npm: パッケージマネージャー
